clear all
clear space
%% Arjan Singh Puniani | ECE 2556 | In-Class Exercise

%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\arjan\Documents\pitt\BIOENG 2556 Neuro-Signal Modeling and Analysis\InClass_Exercise_and_Project_1\subj_information_4_students.xlsx
%    Worksheet: subj_information
%
% Auto-generated by MATLAB on 07-Oct-2021 17:38:55

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 4);

% Specify sheet and range
opts.Sheet = "subj_information";
opts.DataRange = "A2:D203";

% Specify column names and types
opts.VariableNames = ["Subj_ID", "Age", "Sex", "Status"];
opts.VariableTypes = ["double", "double", "categorical", "categorical"];

% Specify variable properties
opts = setvaropts(opts, ["Sex", "Status"], "EmptyFieldRule", "auto");

% Import the data
tbl = readtable("C:\Users\arjan\Documents\pitt\BIOENG 2556 Neuro-Signal Modeling and Analysis\InClass_Exercise_and_Project_1\subj_information_4_students.xlsx", opts, "UseExcel", false);

%% Convert to output type
Subj_ID = tbl.Subj_ID;
Age = tbl.Age;
Sex = tbl.Sex;
Status = tbl.Status;

%% Clear temporary variables
clear opts tbl
load subject_data.mat

%  subject_data.mat contains 113x113x9x202, represents
%           202 subjectsâ€™ 9 networks, each network dimension is 113x113

% motivation: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0013701

%% #1: DENSITY UND - fraction of present connections to possible connections
gNetwork = size(all_matrices,3); % number of distinct models
pts = size(all_matrices,4); % total patients in dataset
kdenMx = zeros(gNetwork,pts);
for pt=1:pts
    for network=1:gNetwork
        [kden,N,K]=density_und(all_matrices(:,:,network,pt));
        disp("patient #"+pt+" had a density of " + kden + " for model " + network)
        kdenMx(network,pt) = kden;
    end
end
ptAvg = mean(kdenMx,1); networkAvg = mean(kdenMx,2)'; % average density across patients for each network
[h1,p1] = ttest(networkAvg);


%% #2 Assortativity The assortativity coefficient is a correlation coefficient between the
%   strengths (weighted degrees) of all nodes on two opposite ends of a link.
%   A positive assortativity coefficient indicates that nodes tend to link to
%   other nodes with the same or similar strength.
gNetwork = size(all_matrices,3); pts = size(all_matrices,4);
rhoMx = zeros(gNetwork,pts);
for pt=1:pts
    for network=1:gNetwork
        rho = assortativity_wei(all_matrices(:,:,network,pt),0); %disp("patient #"+pt+" had a correlation of " + rho + " for model " + network)
        rhoMx(network,pt) = rho;
    end
end
networkRhoAvg = mean(rhoMx,2)'; % average assortativity across patients for each network
[h2,p2] = ttest(networkRhoAvg)

%% #3 Clustering Coefficient: The weighted clustering coefficient is the average "intensity"
%                             (geometric mean) of all triangles associated with each node.
gNetwork = size(all_matrices,3); pts = size(all_matrices,4); 
clusterMx=zeros(gNetwork,pts);
for pt=1:pts
    for network=1:gNetwork
        cluster = mean(clustering_coef_wu(all_matrices(:,:,network,pt)));
        disp("patient #"+pt+" had a CLUSTERING coefficient of " + cluster + " for model " + network)
        clusterMx(network,pt) = cluster;
    end
end
networkClustAvg = mean(clusterMx,2)';
[h3,p3] = ttest(networkClustAvg)

%% #4: Strength: Node strength is the sum of weights of links connected to the node
gNetwork = size(all_matrices,3); % number of distinct models
pts = size(all_matrices,4); % total patients in dataset
stxMx = zeros(gNetwork,pts);
for pt=1:pts
    for network=1:gNetwork
        str=strengths_und(all_matrices(:,:,network,pt)); % disp("patient #"+pt+" had a strength of " + mean(str) + " for model " + network)
        stxMx(network,pt) = mean(str);
    end
end
networkStxAvg = mean(stxMx,2)';
[h4,p4] = ttest(networkStxAvg)


%% #5: community_louvain
%  The optimal community structure is a subdivision of the network into
%   nonoverlapping groups of nodes which maximizes the number of within-
%	group edges, and minimizes the number of between-group edges.
modulMx = zeros(gNetwork,pts);
for pt=1:pts
    for network=1:gNetwork
        [M,Q] =community_louvain(all_matrices(:,:,network,pt)); % Q is MODULARITY
        modulMx(network,pt) = Q; % optimized community-structure statistic (modularity)
    end
end
networkQavg = mean(modulMx,2)';
[h5,p5] = ttest(networkQavg)

%% #6: QUASI IDEMPOTENCE
% degree may be viewed as a measure of
%   "collectivity", meaning how strongly individual nodes participate
%   in collective dynamics.

gNetwork = size(all_matrices,3); % number of distinct models
pts = size(all_matrices,4); % total patients in dataset

for pt=1:pts
    for network=1:gNetwork
        [finalMX,vecCorrCoeff,EPS,iters]=quasi_idempotence(all_matrices(:,:,network,pt),10);
        
    end
end
